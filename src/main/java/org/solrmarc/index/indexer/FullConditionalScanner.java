/* The following code was generated by JFlex 1.6.0 */

package org.solrmarc.index.indexer;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/dev/dmg/org.solrmarc/src/org/org.solrmarc/index/indexer/FullScanner.lex</tt>
 */
public class FullConditionalScanner extends FullSym implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CONDITIONAL = 4;
  public static final int CONDITIONAL2 = 6;
  public static final int SUBFIELDSPEC = 8;
  public static final int SUBCTRLFIELDSPEC = 10;
  public static final int CUSTOMSPEC = 12;
  public static final int SCRIPTSPEC = 14;
  public static final int CUSTOMMETHOD = 16;
  public static final int CUSTOMPARAM = 18;
  public static final int MAPSPEC = 20;
  public static final int CONSTANT = 22;
  public static final int FIELDS = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\105\1\106\1\3\22\0\1\23\1\75\1\62"+
    "\1\0\1\72\1\0\1\103\1\104\1\64\1\22\2\0\1\57\1\66"+
    "\1\20\1\7\1\1\1\73\1\34\7\2\1\21\1\0\1\100\1\74"+
    "\1\102\1\56\1\0\1\41\2\6\1\44\1\6\1\35\2\6\1\50"+
    "\1\6\1\55\1\53\1\6\1\54\1\45\1\46\1\6\1\37\4\6"+
    "\1\101\3\6\1\65\1\24\1\67\1\71\1\51\1\0\1\15\1\47"+
    "\1\16\1\40\1\11\1\42\1\10\1\77\1\43\1\30\1\17\1\26"+
    "\1\25\1\33\1\32\1\60\1\17\1\14\1\31\1\12\1\36\1\61"+
    "\1\27\1\13\2\17\1\52\1\63\1\70\1\76\6\0\1\105\u1fa2\0"+
    "\1\105\1\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\3\1\2\2\10\1\1\3\7\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\3\1\1\13"+
    "\1\14\3\1\1\15\1\16\1\17\1\1\1\20\1\1"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\1\1\31\1\32\1\33\1\1\1\34\1\1\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\36\1\44"+
    "\24\0\1\45\1\46\1\47\1\50\6\0\1\16\1\0"+
    "\1\51\1\21\1\52\1\26\4\0\1\53\1\0\1\36"+
    "\1\54\1\55\4\0\1\56\11\0\1\55\1\57\6\0"+
    "\1\60\1\61\1\0\1\31\1\36\6\0\1\62\1\56"+
    "\2\0\1\63\11\0\1\64\1\65\1\0\1\66\1\36"+
    "\2\67\4\0\1\56\14\0\1\36\2\0\1\70\1\71"+
    "\3\0\1\72\7\0\1\36\13\0\1\36\1\73\7\0"+
    "\1\74\1\0\1\36\7\0\1\36\3\0\1\63\2\0"+
    "\1\75\5\0\1\56\24\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u039b\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u039b\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u039b\0\u08e0\0\u039b\0\u039b\0\u039b\0\u0927"+
    "\0\u096e\0\u039b\0\u09b5\0\u09fc\0\u0a43\0\u039b\0\u039b\0\u0a8a"+
    "\0\u0ad1\0\u0b18\0\u039b\0\u0b5f\0\u039b\0\u0ba6\0\u039b\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u039b\0\u039b\0\u039b\0\u0cc2\0\u039b\0\u0d09"+
    "\0\u039b\0\u0d50\0\u0d97\0\u039b\0\u039b\0\u0dde\0\u039b\0\u0e25"+
    "\0\u039b\0\u0e6c\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u0661\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u039b"+
    "\0\u1630\0\u039b\0\u039b\0\u039b\0\u039b\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u0e25\0\u0e25\0\u1793\0\u039b\0\u039b\0\u17da\0\u1821"+
    "\0\u1868\0\u18af\0\u0661\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u039b\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u039b\0\u039b\0\u1d66\0\u039b"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u0661"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u0429\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u039b\0\u039b\0\u22f2"+
    "\0\u039b\0\u2339\0\u1df4\0\u1e3b\0\u2380\0\u23c7\0\u240e\0\u2455"+
    "\0\u039b\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u0661\0\u0661\0\u28c5\0\u290c\0\u2953\0\u0661\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2bd2\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042"+
    "\0\u3089\0\u30d0\0\u039b\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u0661\0\u34b2\0\u34f9\0\u0e6c\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85"+
    "\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u039b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\2\22\1\23\1\16\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\31\1\16"+
    "\1\33\1\16\1\22\1\16\3\31\1\34\1\35\2\31"+
    "\1\20\1\36\1\31\1\23\1\37\1\23\1\40\1\41"+
    "\1\42\2\23\1\31\1\23\1\16\1\43\1\44\2\23"+
    "\1\45\1\46\2\31\1\47\10\16\1\20\3\16\1\31"+
    "\1\16\1\23\4\16\1\22\3\50\2\16\17\50\1\51"+
    "\35\50\1\52\24\50\1\16\2\53\1\21\2\22\3\16"+
    "\1\54\4\16\1\55\2\16\1\56\1\57\1\22\1\16"+
    "\1\60\3\16\1\61\2\16\1\53\6\16\1\62\13\16"+
    "\1\63\3\16\1\64\1\65\1\66\2\16\1\67\1\16"+
    "\1\70\1\53\1\71\1\72\1\73\1\16\1\74\1\16"+
    "\1\75\1\76\2\16\1\22\1\16\1\77\1\100\1\21"+
    "\2\22\15\16\1\22\10\16\1\100\25\16\1\101\10\16"+
    "\1\100\10\16\1\102\1\16\1\22\1\16\2\103\1\21"+
    "\2\22\2\16\10\103\1\16\1\104\1\16\1\22\1\16"+
    "\10\103\1\16\1\103\1\16\1\103\1\16\2\103\3\16"+
    "\1\103\6\16\1\105\1\63\2\103\3\16\1\106\2\16"+
    "\1\107\2\16\1\103\3\16\1\103\6\16\1\22\3\16"+
    "\1\21\2\22\13\16\1\104\1\16\1\22\32\16\1\105"+
    "\1\63\5\16\1\66\2\16\1\107\15\16\1\22\1\16"+
    "\2\110\1\21\2\22\1\110\1\16\10\110\2\16\1\57"+
    "\1\22\1\16\24\110\2\16\3\110\1\16\1\111\2\110"+
    "\2\16\1\65\6\16\1\110\3\16\1\110\1\16\1\110"+
    "\4\16\1\22\22\112\1\57\1\22\1\16\32\112\1\111"+
    "\2\112\1\16\1\112\1\65\22\112\1\16\2\110\1\21"+
    "\2\22\1\110\1\16\10\110\3\16\1\22\1\16\24\110"+
    "\2\16\3\110\1\16\1\113\2\110\2\16\1\114\6\16"+
    "\1\110\3\16\1\110\1\16\1\110\4\16\1\22\22\112"+
    "\1\115\1\22\1\16\32\112\1\116\2\112\1\117\1\112"+
    "\1\65\40\112\1\120\3\112\1\57\1\22\1\16\32\112"+
    "\1\116\2\112\1\16\1\112\1\114\22\112\3\16\1\21"+
    "\2\22\15\16\1\22\33\16\1\63\2\16\1\47\1\64"+
    "\22\16\1\22\22\121\1\115\1\22\1\16\32\121\1\16"+
    "\2\121\1\16\1\121\1\65\22\121\110\0\1\122\1\123"+
    "\31\0\1\123\36\0\1\123\14\0\2\123\31\0\1\123"+
    "\36\0\1\123\17\0\1\22\110\0\1\124\26\0\1\124"+
    "\1\0\1\124\1\0\1\124\2\0\3\124\1\0\1\124"+
    "\2\0\3\124\23\0\1\124\13\0\1\125\1\0\1\125"+
    "\1\126\7\125\1\127\3\0\7\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\3\125\1\130\5\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\13\0\1\125\1\0\1\125\1\131\7\125"+
    "\1\127\3\0\7\125\1\0\15\125\1\0\3\125\2\0"+
    "\2\125\15\0\1\125\1\0\1\125\13\0\1\125\1\0"+
    "\11\125\1\127\3\0\1\132\6\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\5\125\1\133\3\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\13\0\1\125\1\0\11\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\11\125\1\127"+
    "\3\0\7\125\1\0\1\125\1\134\13\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\5\125\1\135\3\125\1\127\3\0\4\125\1\136"+
    "\2\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\6\125\1\137"+
    "\2\125\1\127\3\0\7\125\1\0\15\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\124"+
    "\26\0\1\124\1\140\1\124\1\0\1\124\2\0\3\124"+
    "\1\0\1\124\2\0\3\124\23\0\1\124\13\0\1\125"+
    "\1\0\5\125\1\141\3\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\11\125\1\127\3\0\7\125"+
    "\1\0\6\125\1\142\6\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\6\125\1\143\1\0\15\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\124"+
    "\6\0\1\144\17\0\1\124\1\0\1\124\1\0\1\124"+
    "\2\0\3\124\1\0\1\124\2\0\3\124\23\0\1\124"+
    "\13\0\1\124\26\0\1\124\1\0\1\124\1\0\1\124"+
    "\2\0\3\124\1\0\1\124\2\0\1\124\1\145\1\124"+
    "\23\0\1\124\5\0\3\50\2\0\17\50\1\0\35\50"+
    "\1\0\24\50\12\0\1\146\1\0\1\147\16\0\1\150"+
    "\26\0\1\151\25\0\2\152\31\0\1\152\36\0\1\152"+
    "\46\0\1\153\105\0\1\154\71\0\1\155\103\0\1\156"+
    "\127\0\1\157\136\0\1\160\24\0\2\161\31\0\1\161"+
    "\36\0\1\161\14\0\2\162\3\0\1\162\1\0\10\162"+
    "\5\0\24\162\2\0\3\162\2\0\2\162\11\0\1\162"+
    "\3\0\1\162\1\0\1\162\101\0\1\163\106\0\1\164"+
    "\115\0\1\165\4\0\2\100\31\0\1\100\36\0\1\100"+
    "\13\0\24\166\1\167\62\166\1\0\2\103\5\0\10\103"+
    "\5\0\10\103\1\0\1\103\1\0\1\103\1\0\2\103"+
    "\3\0\1\103\10\0\2\103\11\0\1\103\3\0\1\103"+
    "\17\0\10\170\5\0\7\170\2\0\1\170\1\0\1\170"+
    "\1\0\2\170\3\0\1\170\10\0\2\170\7\0\1\171"+
    "\5\0\1\170\10\0\2\172\3\0\1\172\1\173\10\172"+
    "\1\173\3\0\1\173\24\172\1\173\1\0\3\172\2\0"+
    "\2\172\11\0\1\172\3\0\1\172\1\0\1\172\5\0"+
    "\22\112\3\0\32\112\1\0\2\112\1\0\1\112\1\0"+
    "\44\112\3\0\11\112\1\174\20\112\1\0\2\112\1\0"+
    "\1\112\1\0\22\112\22\121\3\0\32\121\1\0\2\121"+
    "\1\0\1\121\1\0\22\121\1\0\2\175\31\0\1\175"+
    "\36\0\1\175\14\0\2\176\31\0\1\176\36\0\1\176"+
    "\21\0\1\176\26\0\1\176\1\0\1\176\1\0\1\176"+
    "\2\0\3\176\1\0\1\176\2\0\3\176\23\0\1\176"+
    "\13\0\1\125\1\0\2\125\1\177\6\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\26\0\1\200\73\0\1\125\1\0"+
    "\2\125\1\201\6\125\1\127\3\0\7\125\1\0\15\125"+
    "\1\0\3\125\2\0\2\125\15\0\1\125\1\0\1\125"+
    "\13\0\1\125\1\0\3\125\1\202\5\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\11\125\1\127"+
    "\3\0\1\125\1\203\5\125\1\0\15\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\11\125\1\127\3\0\2\125\1\203\4\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\11\125\1\127\3\0\4\125"+
    "\1\204\2\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\0\15\125\1\0\3\125\2\0"+
    "\1\125\1\205\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\11\125\1\127\3\0\5\125\1\206\1\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\4\125\1\207\4\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\33\0\1\210\66\0\1\125"+
    "\1\0\2\125\1\211\6\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\1\125\1\212\7\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\0\3\125\1\213\11\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\17\0"+
    "\1\214\102\0\1\176\26\0\1\176\1\0\1\176\1\0"+
    "\1\176\2\0\3\176\1\0\1\176\2\0\2\176\1\215"+
    "\23\0\1\176\6\0\2\216\31\0\1\216\36\0\1\216"+
    "\53\0\1\217\101\0\1\220\65\0\1\221\111\0\1\222"+
    "\131\0\1\223\47\0\2\161\31\0\1\161\31\0\1\224"+
    "\1\225\3\0\1\161\117\0\1\226\2\0\3\227\2\0"+
    "\100\227\3\0\2\170\5\0\10\170\5\0\10\170\1\0"+
    "\1\170\1\0\1\170\1\0\2\170\3\0\1\170\10\0"+
    "\2\170\4\0\1\170\1\230\3\0\1\170\3\0\1\170"+
    "\17\0\10\170\5\0\7\170\2\0\1\170\1\0\1\170"+
    "\1\0\2\170\3\0\1\170\10\0\2\170\15\0\1\170"+
    "\7\0\22\112\3\0\4\112\1\231\25\112\1\0\2\112"+
    "\1\0\1\112\1\0\22\112\1\0\2\232\3\0\1\233"+
    "\1\0\10\233\1\125\1\127\3\0\7\233\1\232\14\233"+
    "\1\125\1\0\3\233\2\0\2\233\11\0\1\232\3\0"+
    "\1\233\1\0\1\233\15\0\1\234\1\235\103\0\1\125"+
    "\1\0\4\125\1\236\4\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\2\125\1\203\6\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\2\125"+
    "\1\237\6\125\1\127\3\0\7\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\5\125\1\240\3\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\13\0\1\125\1\0\11\125\1\127\3\0"+
    "\6\125\1\241\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\0\6\125\1\242\6\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\33\0"+
    "\1\243\66\0\1\125\1\0\1\125\1\244\7\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\1\125\1\245\5\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\1\125\1\246\7\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\16\0\1\247\76\0\1\250\1\251\31\0"+
    "\1\251\36\0\1\251\44\0\1\252\67\0\1\253\112\0"+
    "\1\254\104\0\1\255\73\0\2\256\31\0\1\257\36\0"+
    "\1\257\14\0\2\260\31\0\1\260\36\0\1\260\117\0"+
    "\1\261\2\0\12\112\1\262\7\112\3\0\32\112\1\0"+
    "\2\112\1\0\1\112\1\0\22\112\1\0\2\263\3\0"+
    "\1\263\1\232\10\263\1\232\3\0\1\232\24\263\1\232"+
    "\1\0\3\263\2\0\2\263\11\0\1\263\3\0\1\263"+
    "\1\0\1\263\6\0\2\263\3\0\1\264\1\232\10\264"+
    "\1\233\1\127\2\0\1\232\7\264\1\263\14\264\1\233"+
    "\1\0\3\264\2\0\2\264\11\0\1\263\3\0\1\264"+
    "\1\0\1\264\16\0\1\265\110\0\1\266\101\0\1\125"+
    "\1\0\5\125\1\267\3\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\11\125\1\127\3\0\5\125"+
    "\1\270\1\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\271\15\125\1\0\3\125\2\0"+
    "\2\125\15\0\1\125\1\0\1\125\13\0\1\125\1\0"+
    "\11\125\1\127\3\0\7\125\1\0\15\125\1\0\3\125"+
    "\2\0\1\272\1\125\15\0\1\125\1\0\1\125\44\0"+
    "\1\273\55\0\1\125\1\0\11\125\1\127\3\0\7\125"+
    "\1\0\2\125\1\274\5\125\1\275\4\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\11\125\1\127\3\0\7\125\1\0\3\125\1\276"+
    "\11\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\3\125\1\277\5\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\44\0\1\300\5\0\1\301"+
    "\43\0\1\123\31\0\1\123\36\0\1\123\114\0\1\302"+
    "\22\0\1\303\170\0\1\304\21\0\1\305\75\0\2\260"+
    "\31\0\1\260\32\0\1\225\3\0\1\260\13\0\22\112"+
    "\3\0\5\112\1\306\24\112\1\0\2\112\1\0\1\112"+
    "\1\0\22\112\12\0\1\307\106\0\1\310\102\0\1\125"+
    "\1\0\6\125\1\126\2\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\11\125\1\127\3\0\1\311"+
    "\6\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\2\125\1\312"+
    "\6\125\1\127\3\0\7\125\1\0\15\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\16\0\1\313"+
    "\103\0\1\125\1\0\1\125\1\314\7\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\11\125\1\127"+
    "\3\0\7\125\1\0\5\125\1\315\7\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\11\125\1\127\3\0\4\125\1\316\2\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\11\125\1\127\3\0\7\125"+
    "\1\0\14\125\1\317\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\16\0\1\320\137\0\1\321\107\0"+
    "\1\322\106\0\1\323\54\0\1\324\126\0\1\325\55\0"+
    "\22\112\3\0\1\326\31\112\1\0\2\112\1\0\1\112"+
    "\1\0\22\112\1\0\2\327\3\0\1\327\1\0\10\327"+
    "\5\0\24\327\2\0\3\327\2\0\2\327\11\0\1\327"+
    "\3\0\1\327\1\0\1\327\21\0\1\330\110\0\1\331"+
    "\76\0\1\125\1\0\6\125\1\332\2\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\11\125\1\127"+
    "\3\0\7\125\1\0\11\125\1\333\3\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\13\0\1\125"+
    "\1\0\11\125\1\127\3\0\7\125\1\0\3\125\1\334"+
    "\11\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\23\0\1\335\136\0\1\336\52\0\1\337\127\0"+
    "\1\340\104\0\1\73\156\0\1\341\5\0\22\112\3\0"+
    "\24\112\1\342\5\112\1\0\2\112\1\0\1\112\1\0"+
    "\22\112\1\0\2\343\3\0\1\343\1\327\10\343\1\327"+
    "\3\0\1\327\24\343\1\327\1\0\3\343\2\0\2\343"+
    "\11\0\1\343\3\0\1\343\1\0\1\343\22\0\1\344"+
    "\123\0\1\345\62\0\1\125\1\0\11\125\1\127\3\0"+
    "\5\125\1\346\1\125\1\0\15\125\1\0\3\125\2\0"+
    "\2\125\15\0\1\125\1\0\1\125\13\0\1\125\1\0"+
    "\11\125\1\127\3\0\7\125\1\0\1\125\1\347\13\125"+
    "\1\0\3\125\2\0\2\125\15\0\1\125\1\0\1\125"+
    "\13\0\1\125\1\0\5\125\1\350\3\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\37\0\1\351\112\0\1\352\147\0"+
    "\1\75\40\0\1\353\120\0\1\354\43\0\22\112\3\0"+
    "\1\355\31\112\1\0\2\112\1\0\1\112\1\0\22\112"+
    "\16\0\1\265\104\0\1\356\100\0\1\125\1\0\4\125"+
    "\1\357\4\125\1\127\3\0\7\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\11\125\1\127\3\0\7\125\1\0\12\125"+
    "\1\360\2\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\13\0\1\125\1\0\2\125\1\361\6\125"+
    "\1\127\3\0\7\125\1\0\15\125\1\0\3\125\2\0"+
    "\2\125\15\0\1\125\1\0\1\125\21\0\1\362\141\0"+
    "\1\363\51\0\1\364\74\0\15\112\1\365\4\112\3\0"+
    "\32\112\1\0\2\112\1\0\1\112\1\0\22\112\40\0"+
    "\1\366\54\0\1\125\1\0\11\125\1\127\3\0\7\125"+
    "\1\0\3\125\1\367\11\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\1\125\1\370\5\125\1\0\15\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\1\125\1\371\7\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\45\0\1\372\74\0\1\373\157\0\1\74"+
    "\7\0\22\112\3\0\32\112\1\0\1\374\1\112\1\0"+
    "\1\112\1\0\22\112\41\0\1\375\53\0\1\125\1\0"+
    "\11\125\1\127\3\0\7\125\1\0\13\125\1\376\1\125"+
    "\1\0\3\125\2\0\2\125\15\0\1\125\1\0\1\125"+
    "\13\0\1\125\1\0\11\125\1\127\3\0\7\125\1\0"+
    "\6\125\1\377\6\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\55\0\1\u0100\101\0\1\u0101\74\0"+
    "\1\u0102\63\0\1\125\1\0\11\125\1\127\3\0\6\125"+
    "\1\u0103\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\6\125\1\u0104"+
    "\2\125\1\127\3\0\7\125\1\0\15\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\40\0\1\u0105"+
    "\71\0\1\u0106\71\0\2\u0102\3\0\1\u0102\1\0\10\u0102"+
    "\5\0\24\u0102\2\0\3\u0102\2\0\2\u0102\11\0\1\u0102"+
    "\3\0\1\u0102\1\0\1\u0102\13\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\0\3\125\1\u0107\11\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\5\125\1\u0108\3\125\1\127\3\0\7\125"+
    "\1\0\15\125\1\0\3\125\2\0\2\125\15\0\1\125"+
    "\1\0\1\125\45\0\1\u0109\63\0\1\u010a\77\0\1\125"+
    "\1\0\1\125\1\u010b\7\125\1\127\3\0\7\125\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\13\0\1\125\1\0\2\125\1\u010c\6\125\1\127"+
    "\3\0\7\125\1\0\15\125\1\0\3\125\2\0\2\125"+
    "\15\0\1\125\1\0\1\125\16\0\1\u010d\107\0\1\u010e"+
    "\102\0\1\125\1\0\3\125\1\u010f\5\125\1\127\3\0"+
    "\7\125\1\0\15\125\1\0\3\125\2\0\2\125\15\0"+
    "\1\125\1\0\1\125\13\0\1\125\1\0\11\125\1\127"+
    "\3\0\7\125\1\0\6\125\1\u0110\6\125\1\0\3\125"+
    "\2\0\2\125\15\0\1\125\1\0\1\125\20\0\1\u0111"+
    "\136\0\1\u0112\51\0\1\125\1\0\1\125\1\u0113\7\125"+
    "\1\127\3\0\7\125\1\0\15\125\1\0\3\125\2\0"+
    "\2\125\15\0\1\125\1\0\1\125\13\0\1\125\1\0"+
    "\11\125\1\127\3\0\5\125\1\u0114\1\125\1\0\15\125"+
    "\1\0\3\125\2\0\2\125\15\0\1\125\1\0\1\125"+
    "\16\0\1\u0115\127\0\1\u0116\62\0\1\125\1\0\11\125"+
    "\1\127\3\0\7\125\1\0\3\125\1\371\11\125\1\0"+
    "\3\125\2\0\2\125\15\0\1\125\1\0\1\125\13\0"+
    "\1\125\1\0\11\125\1\127\3\0\6\125\1\371\1\0"+
    "\15\125\1\0\3\125\2\0\2\125\15\0\1\125\1\0"+
    "\1\125\45\0\1\u0117\101\0\1\u0117\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\3\1\1\11\10\1\1\11\7\1\1\11"+
    "\1\1\3\11\2\1\1\11\3\1\2\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\3\11\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\5\11\2\1\24\0\4\11\6\0\1\11\1\0"+
    "\4\11\4\0\1\1\1\0\1\1\2\11\4\0\1\1"+
    "\11\0\1\1\1\11\6\0\2\11\1\0\1\11\1\1"+
    "\6\0\2\1\2\0\1\1\11\0\2\11\1\0\1\11"+
    "\3\1\4\0\1\11\14\0\1\1\2\0\2\1\3\0"+
    "\1\1\7\0\1\1\13\0\2\1\7\0\1\11\1\0"+
    "\1\1\7\0\1\1\3\0\1\1\2\0\1\1\5\0"+
    "\1\1\24\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    int save_zzLexicalState;

    List<String> scanner_errors = null;
    StringBuilder string = new StringBuilder();
    public FullConditionalScanner(ComplexSymbolFactory sf)
    {
        this(new StringReader(""));
        this.sf = sf;
        scanner_errors = new ArrayList<String>();
    }

    ComplexSymbolFactory sf;

    public void startParse(String strToParse)
    {
        yyreset(new StringReader(strToParse));
        scanner_errors = new ArrayList<String>();
    }

    private void error(String message)
    {
        scanner_errors.add(message);
    }

    public List<String> getScannerErrors()
    {
        return(scanner_errors);
    }

    private Symbol symbol(String name, int sym)
    {
        return sf.newSymbol(name, sym, new Location(yyline+1, yycolumn+1, yychar), new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val)
    {
        Location left = new Location(yyline+1,yycolumn+1,yychar);
        Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return sf.newSymbol(name, sym, left, right,val);
    }

    Pattern number = Pattern.compile("[0-9]*");
    Pattern identifier = Pattern.compile("[A-Za-z0-9][A-Z_a-z0-9./\\\\]*[A-Za-z0-9]");

    private Symbol stringIdentifierOrNumber(String value)
    {
        if (number.matcher(value).matches())
            return symbol("NUMBER",FullSym.NUMBER, value);
        else if (identifier.matcher(value).matches())
            return symbol("IDENTIFIER", FullSym.IDENTIFIER, value);
        else
            return symbol("QUOTEDSTR",FullSym.QUOTEDSTR, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FullConditionalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
                    String scannerStateStr = "initial";
                    switch (yystate() ) {
                        case YYINITIAL:        scannerStateStr = "startspec";    break;
                        case STRING:           scannerStateStr = "string";       break;
                        case CONDITIONAL:      scannerStateStr = "conditional";  break;
                        case CONDITIONAL2:     scannerStateStr = "conditional2"; break;
                        case SUBFIELDSPEC:     scannerStateStr = "subfield";     break;
                        case SUBCTRLFIELDSPEC: scannerStateStr = "subctrlfield"; break;
                        case CUSTOMSPEC:       scannerStateStr = "customspec";   break;
                        case CUSTOMMETHOD:     scannerStateStr = "custommethod"; break;
                        case CUSTOMPARAM:      scannerStateStr = "customparam";  break;
                        case MAPSPEC:          scannerStateStr = "mapspec";      break;
                        default:               scannerStateStr = "unknown";      break;
                    }
                    error("Error: Illegal character <"+ yytext()+">  found in scanner state "+ scannerStateStr);
          }
        case 62: break;
        case 2: 
          { /* ignore */
          }
        case 63: break;
        case 3: 
          { yybegin(YYINITIAL);    return symbol(":",FullSym.COLON);
          }
        case 64: break;
        case 4: 
          { return symbol("{",FullSym.LBRACE);
          }
        case 65: break;
        case 5: 
          { yybegin(CONDITIONAL);  return symbol("?",FullSym.QUESTION);
          }
        case 66: break;
        case 6: 
          { yybegin(MAPSPEC);      return symbol(",", FullSym.COMMA);
          }
        case 67: break;
        case 7: 
          { save_zzLexicalState = CONSTANT; string.setLength(0); yybegin(STRING);
          }
        case 68: break;
        case 8: 
          { string.append( yytext() );
          }
        case 69: break;
        case 9: 
          { string.append('\\');
          }
        case 70: break;
        case 10: 
          { yybegin(save_zzLexicalState);
                                   return symbol("QUOTEDSTR",FullSym.QUOTEDSTR,string.toString());
          }
        case 71: break;
        case 11: 
          { yybegin(YYINITIAL);  return symbol(":", FullSym.COLON);
          }
        case 72: break;
        case 12: 
          { return symbol(")",FullSym.RPAREN);
          }
        case 73: break;
        case 13: 
          { yybegin(MAPSPEC);  return symbol(",", FullSym.COMMA);
          }
        case 74: break;
        case 14: 
          { return symbol("OR",FullSym.OR);
          }
        case 75: break;
        case 15: 
          { return symbol("(",FullSym.LPAREN);
          }
        case 76: break;
        case 16: 
          { yybegin(YYINITIAL);  return symbol("}", FullSym.RBRACE);
          }
        case 77: break;
        case 17: 
          { yybegin(CONDITIONAL2);  return symbol("EQU",FullSym.EQU );
          }
        case 78: break;
        case 18: 
          { return symbol("NOT",FullSym.NOT);
          }
        case 79: break;
        case 19: 
          { yybegin(CONDITIONAL2);  return symbol("MATCH",FullSym.MATCH);
          }
        case 80: break;
        case 20: 
          { yybegin(CONDITIONAL2);  return symbol("LE",FullSym.LT);
          }
        case 81: break;
        case 21: 
          { yybegin(CONDITIONAL2);  return symbol("GT",FullSym.GT);
          }
        case 82: break;
        case 22: 
          { return symbol("AND",FullSym.AND);
          }
        case 83: break;
        case 23: 
          { yybegin(CONDITIONAL);  return symbol("NUMBER",FullSym.NUMBER, yytext());
          }
        case 84: break;
        case 24: 
          { string.setLength(0); save_zzLexicalState = CONDITIONAL; yybegin(STRING);
          }
        case 85: break;
        case 25: 
          { yybegin(SUBCTRLFIELDSPEC); return symbol("SUBFIELDSPEC",FullSym.SUBFIELDSPEC, yytext());
          }
        case 86: break;
        case 26: 
          { yybegin(YYINITIAL);   return symbol(":",FullSym.COLON);
          }
        case 87: break;
        case 27: 
          { yybegin(CONDITIONAL); return symbol("?",FullSym.QUESTION);
          }
        case 88: break;
        case 28: 
          { yybegin(YYINITIAL);   return symbol("}",FullSym.RBRACE);
          }
        case 89: break;
        case 29: 
          { yybegin(CUSTOMMETHOD); return symbol(",", FullSym.COMMA);
          }
        case 90: break;
        case 30: 
          { return stringIdentifierOrNumber(yytext());
          }
        case 91: break;
        case 31: 
          { yybegin(MAPSPEC); return symbol(",", FullSym.COMMA);
          }
        case 92: break;
        case 32: 
          { yybegin(CUSTOMPARAM); return symbol("(",FullSym.LPAREN);
          }
        case 93: break;
        case 33: 
          { yybegin(MAPSPEC); return symbol(")",FullSym.RPAREN);
          }
        case 94: break;
        case 34: 
          { return symbol(",", FullSym.COMMA);
          }
        case 95: break;
        case 35: 
          { save_zzLexicalState = CUSTOMPARAM; string.setLength(0); yybegin(STRING);
          }
        case 96: break;
        case 36: 
          { return symbol("QUOTEDSTR", FullSym.QUOTEDSTR, yytext());
          }
        case 97: break;
        case 37: 
          { string.append('\t');
          }
        case 98: break;
        case 38: 
          { string.append('\r');
          }
        case 99: break;
        case 39: 
          { string.append('\n');
          }
        case 100: break;
        case 40: 
          { string.append('\"');
          }
        case 101: break;
        case 41: 
          { return symbol("SUBFIELD",FullSym.SUBFIELD, yytext().substring(1,2));
          }
        case 102: break;
        case 42: 
          { yybegin(CONDITIONAL2);  return symbol("NEQ",FullSym.NEQ);
          }
        case 103: break;
        case 43: 
          { return symbol("IDENTIFIER", FullSym.IDENTIFIER, yytext());
          }
        case 104: break;
        case 44: 
          { yybegin(SUBCTRLFIELDSPEC); return symbol("CTRLFIELDSPEC",FullSym.CTRLFIELDSPEC, yytext());
          }
        case 105: break;
        case 45: 
          { yybegin(SUBFIELDSPEC); return symbol("FIELDSPEC",FullSym.FIELDSPEC, yytext());
          }
        case 106: break;
        case 46: 
          { yybegin(MAPSPEC);      return symbol("FULLRECORD", FullSym.FULLRECORD, yytext());
          }
        case 107: break;
        case 47: 
          { return symbol("FIELDSPEC", FullSym.FIELDSPEC, yytext());
          }
        case 108: break;
        case 48: 
          { return symbol("POSITION", FullSym.POSITION, yytext());
          }
        case 109: break;
        case 49: 
          { yybegin(CONDITIONAL);  return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 2));
          }
        case 110: break;
        case 50: 
          { yybegin(CUSTOMSPEC);   return symbol("JAVA", FullSym.JAVA, yytext() );
          }
        case 111: break;
        case 51: 
          { yybegin(MAPSPEC);      return symbol("DATE", FullSym.DATE, yytext());
          }
        case 112: break;
        case 52: 
          { error("Illegal indicator specification <"+ yytext()+">");
          }
        case 113: break;
        case 53: 
          { return symbol("IND",FullSym.IND, yytext().substring(3,4));
          }
        case 114: break;
        case 54: 
          { yybegin(CONDITIONAL);  return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 3));
          }
        case 115: break;
        case 55: 
          { yybegin(CUSTOMPARAM);   return symbol("CUSTOMIDENTIFIER", FullSym.CUSTOMIDENTIFIER, yytext() );
          }
        case 116: break;
        case 56: 
          { yybegin(CUSTOMSPEC);   return symbol("CUSTOM", FullSym.CUSTOM, yytext() );
          }
        case 117: break;
        case 57: 
          { yybegin(SCRIPTSPEC);   return symbol("SCRIPT", FullSym.SCRIPT, yytext() );
          }
        case 118: break;
        case 58: 
          { yybegin(FIELDS);       return symbol("FIELDS", FullSym.FIELDS, yytext());
          }
        case 119: break;
        case 59: 
          { yybegin(CUSTOMPARAM);   return symbol("CUSTOMIDENTIFIER", FullSym.EXTCUSTOMIDENTIFIER, yytext() );
          }
        case 120: break;
        case 60: 
          { yybegin(CONDITIONAL2);  return symbol("CONTAINS",FullSym.CONTAINS);
          }
        case 121: break;
        case 61: 
          { return symbol("CUSTOM_MAP", FullSym.CUSTOM_MAP, yytext());
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(save_zzLexicalState); error("Error: End of input encountered in quoted string: "+ string.toString());
            }
            case 280: break;
            default:
              {      return sf.newSymbol("EOF", FullSym.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
