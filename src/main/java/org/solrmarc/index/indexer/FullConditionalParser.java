
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package org.solrmarc.index.indexer;

import java_cup.runtime.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.util.ArrayList;
import java.util.Collections;
import org.solrmarc.index.extractor.AbstractMultiValueExtractor;
import org.solrmarc.index.extractor.AbstractSingleValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractorFactory;
import org.solrmarc.index.extractor.MultiValueWrapperSingleValueExtractor;
import org.solrmarc.index.extractor.impl.constant.ConstantMultiValueExtractor;
import org.solrmarc.index.extractor.impl.date.DateValueExtractorFactory;
import org.solrmarc.index.extractor.impl.direct.DirectMultiValueExtractor;
import org.solrmarc.index.extractor.impl.direct.RegexMultiValueExtractor;
import org.solrmarc.index.extractor.impl.fullrecord.FullRecordValueExtractorFactory;

import org.solrmarc.index.specification.AbstractSpecificationFactory;
import org.solrmarc.index.specification.CompositeSpecification;
import org.solrmarc.index.specification.SingleSpecification;
import org.solrmarc.tools.Utils;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.solrmarc.index.specification.conditional.Condition;
import org.solrmarc.index.specification.conditional.ConditionComposite;
import org.solrmarc.index.specification.conditional.ConditionIndicator;
import org.solrmarc.index.specification.conditional.ConditionPosition;
import org.solrmarc.index.specification.conditional.ConditionSubfield;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes", "unused", "unchecked", "deprecation"})
public class FullConditionalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FullSym.class;
}

  /** Default constructor. */
  public FullConditionalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\010\005\000\002" +
    "\010\003\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\006\000\002\004\003\000" +
    "\002\004\006\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\013" +
    "\010\000\002\013\013\000\002\013\006\000\002\013\011" +
    "\000\002\013\003\000\002\026\003\000\002\026\006\000" +
    "\002\024\003\000\002\024\002\000\002\011\003\000\002" +
    "\011\006\000\002\011\003\000\002\011\006\000\002\012" +
    "\005\000\002\012\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\007\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\004\000\002\020\005\000\002\020\004\000\002\020\004" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\034\003\024\004\015\005\004\006\027\007" +
    "\012\010\011\012\006\013\005\020\014\040\031\042\017" +
    "\044\016\047\023\001\002\000\012\014\uffdd\016\035\026" +
    "\227\044\uffdd\001\002\000\006\002\ufff9\016\ufff9\001\002" +
    "\000\006\002\ufffc\016\ufffc\001\002\000\010\002\ufffe\016" +
    "\ufffe\024\224\001\002\000\006\002\ufff8\016\ufff8\001\002" +
    "\000\010\002\uffec\016\uffec\026\221\001\002\000\010\002" +
    "\uffee\016\uffee\026\216\001\002\000\010\002\ufffd\016\ufffd" +
    "\017\214\001\002\000\006\040\031\042\017\001\002\000" +
    "\004\026\174\001\002\000\010\002\ufff5\016\ufff5\024\ufff5" +
    "\001\002\000\016\002\uffc7\016\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\043\173\001\002\000\004\002\172\001\002\000\006" +
    "\002\uffff\016\140\001\002\000\010\002\ufffb\016\ufffb\022" +
    "\136\001\002\000\012\002\uffe0\016\uffe0\022\uffe0\026\133" +
    "\001\002\000\006\002\ufff7\016\ufff7\001\002\000\012\002" +
    "\uffcc\016\uffcc\017\uffcc\022\063\001\002\000\010\002\uffce" +
    "\016\uffce\017\uffce\001\002\000\012\014\uffdd\016\035\026" +
    "\037\044\uffdd\001\002\000\010\002\uffd2\016\uffd2\017\uffd2" +
    "\001\002\000\020\002\uffc6\016\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\041\032\043\033\001\002\000\016\002\uffcb\016\uffcb" +
    "\017\uffcb\021\uffcb\022\uffcb\043\034\001\002\000\014\002" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\001\002\000\014" +
    "\002\uffca\016\uffca\017\uffca\021\uffca\022\uffca\001\002\000" +
    "\006\014\uffde\044\uffde\001\002\000\006\014\045\044\044" +
    "\001\002\000\004\014\040\001\002\000\004\027\041\001" +
    "\002\000\010\014\uffdd\016\035\044\uffdd\001\002\000\006" +
    "\014\045\044\044\001\002\000\006\002\ufff3\016\ufff3\001" +
    "\002\000\010\002\uffda\016\uffda\026\057\001\002\000\010" +
    "\002\uffdc\016\uffdc\026\046\001\002\000\010\014\051\044" +
    "\050\046\047\001\002\000\006\016\uffd4\027\uffd4\001\002" +
    "\000\006\016\uffd6\027\uffd6\001\002\000\006\016\uffd5\027" +
    "\uffd5\001\002\000\006\016\uffd7\027\uffd7\001\002\000\006" +
    "\016\054\027\055\001\002\000\010\014\051\044\050\046" +
    "\047\001\002\000\006\002\uffdb\016\uffdb\001\002\000\006" +
    "\016\uffd8\027\uffd8\001\002\000\010\014\051\044\050\046" +
    "\047\001\002\000\006\016\054\027\061\001\002\000\006" +
    "\002\uffd9\016\uffd9\001\002\000\006\002\uffef\016\uffef\001" +
    "\002\000\016\025\064\026\072\036\073\037\066\040\070" +
    "\043\067\001\002\000\016\025\064\026\072\036\073\037" +
    "\066\040\070\043\067\001\002\000\016\002\uffc1\016\uffc1" +
    "\017\uffc1\023\uffc1\024\uffc1\027\uffc1\001\002\000\016\030" +
    "\101\031\100\032\075\033\074\034\077\035\076\001\002" +
    "\000\016\030\101\031\100\032\075\033\074\034\077\035" +
    "\076\001\002\000\010\036\117\037\115\043\116\001\002" +
    "\000\014\002\uffcd\016\uffcd\017\uffcd\023\111\024\112\001" +
    "\002\000\016\025\064\026\072\036\073\037\066\040\070" +
    "\043\067\001\002\000\016\030\101\031\100\032\075\033" +
    "\074\034\077\035\076\001\002\000\010\044\uffb6\045\uffb6" +
    "\046\uffb6\001\002\000\010\044\uffb5\045\uffb5\046\uffb5\001" +
    "\002\000\010\044\uffb7\045\uffb7\046\uffb7\001\002\000\010" +
    "\044\uffb8\045\uffb8\046\uffb8\001\002\000\010\044\uffb9\045" +
    "\uffb9\046\uffb9\001\002\000\010\044\uffba\045\uffba\046\uffba" +
    "\001\002\000\010\044\103\045\106\046\104\001\002\000" +
    "\016\002\uffb4\016\uffb4\017\uffb4\023\uffb4\024\uffb4\027\uffb4" +
    "\001\002\000\016\002\uffb2\016\uffb2\017\uffb2\023\uffb2\024" +
    "\uffb2\027\uffb2\001\002\000\016\002\uffc0\016\uffc0\017\uffc0" +
    "\023\uffc0\024\uffc0\027\uffc0\001\002\000\016\002\uffb3\016" +
    "\uffb3\017\uffb3\023\uffb3\024\uffb3\027\uffb3\001\002\000\010" +
    "\023\111\024\112\027\110\001\002\000\016\002\uffc2\016" +
    "\uffc2\017\uffc2\023\uffc2\024\uffc2\027\uffc2\001\002\000\016" +
    "\025\064\026\072\036\073\037\066\040\070\043\067\001" +
    "\002\000\016\025\064\026\072\036\073\037\066\040\070" +
    "\043\067\001\002\000\016\002\uffc4\016\uffc4\017\uffc4\023" +
    "\uffc4\024\uffc4\027\uffc4\001\002\000\016\002\uffc5\016\uffc5" +
    "\017\uffc5\023\uffc5\024\112\027\uffc5\001\002\000\016\030" +
    "\101\031\100\032\075\033\074\034\077\035\076\001\002" +
    "\000\016\030\101\031\100\032\075\033\074\034\077\035" +
    "\076\001\002\000\016\030\101\031\100\032\075\033\074" +
    "\034\077\035\076\001\002\000\010\044\103\045\106\046" +
    "\104\001\002\000\016\002\uffbd\016\uffbd\017\uffbd\023\uffbd" +
    "\024\uffbd\027\uffbd\001\002\000\010\044\103\045\106\046" +
    "\104\001\002\000\016\002\uffbb\016\uffbb\017\uffbb\023\uffbb" +
    "\024\uffbb\027\uffbb\001\002\000\010\044\103\045\106\046" +
    "\104\001\002\000\016\002\uffbc\016\uffbc\017\uffbc\023\uffbc" +
    "\024\uffbc\027\uffbc\001\002\000\010\044\103\045\106\046" +
    "\104\001\002\000\016\002\uffbe\016\uffbe\017\uffbe\023\uffbe" +
    "\024\uffbe\027\uffbe\001\002\000\010\044\103\045\106\046" +
    "\104\001\002\000\016\002\uffbf\016\uffbf\017\uffbf\023\uffbf" +
    "\024\uffbf\027\uffbf\001\002\000\016\002\uffc3\016\uffc3\017" +
    "\uffc3\023\111\024\112\027\uffc3\001\002\000\004\044\134" +
    "\001\002\000\004\027\135\001\002\000\010\002\uffdf\016" +
    "\uffdf\022\uffdf\001\002\000\016\025\064\026\072\036\073" +
    "\037\066\040\070\043\067\001\002\000\012\002\ufffa\016" +
    "\ufffa\023\111\024\112\001\002\000\014\003\145\014\045" +
    "\015\143\026\147\044\044\001\002\000\006\002\uffe7\016" +
    "\uffe7\001\002\000\006\002\uffe8\016\uffe8\001\002\000\004" +
    "\026\154\001\002\000\006\002\uffe9\016\uffe9\001\002\000" +
    "\006\002\uffe1\016\uffe1\001\002\000\006\002\000\016\152" +
    "\001\002\000\010\014\051\044\050\046\047\001\002\000" +
    "\006\016\054\027\151\001\002\000\006\002\uffe6\016\uffe6" +
    "\001\002\000\014\003\145\014\045\015\143\026\147\044" +
    "\044\001\002\000\006\002\uffea\016\uffea\001\002\000\004" +
    "\014\155\001\002\000\012\014\uffdd\016\035\026\160\027" +
    "\156\001\002\000\006\002\uffe3\016\uffe3\001\002\000\004" +
    "\014\164\001\002\000\010\014\051\044\050\046\047\001" +
    "\002\000\006\016\054\027\162\001\002\000\004\027\163" +
    "\001\002\000\006\002\uffe2\016\uffe2\001\002\000\006\026" +
    "\166\027\165\001\002\000\006\002\uffe5\016\uffe5\001\002" +
    "\000\010\014\051\044\050\046\047\001\002\000\006\016" +
    "\054\027\170\001\002\000\004\027\171\001\002\000\006" +
    "\002\uffe4\016\uffe4\001\002\000\004\002\001\001\002\000" +
    "\014\002\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\001\002" +
    "\000\006\014\176\044\175\001\002\000\004\027\202\001" +
    "\002\000\004\027\177\001\002\000\010\014\uffdd\016\035" +
    "\044\uffdd\001\002\000\006\014\045\044\044\001\002\000" +
    "\006\002\ufff2\016\ufff2\001\002\000\010\014\uffdd\016\035" +
    "\044\uffdd\001\002\000\006\014\045\044\044\001\002\000" +
    "\006\002\ufff1\016\ufff1\001\002\000\006\017\uffd0\021\uffd0" +
    "\001\002\000\006\017\210\021\207\001\002\000\004\022" +
    "\212\001\002\000\006\040\031\042\017\001\002\000\006" +
    "\017\uffd1\021\uffd1\001\002\000\016\025\064\026\072\036" +
    "\073\037\066\040\070\043\067\001\002\000\014\002\uffcf" +
    "\016\uffcf\017\uffcf\023\111\024\112\001\002\000\010\020" +
    "\014\040\031\042\017\001\002\000\010\002\uffd3\016\uffd3" +
    "\017\uffd3\001\002\000\010\014\051\044\050\046\047\001" +
    "\002\000\006\016\054\027\220\001\002\000\006\002\uffed" +
    "\016\uffed\001\002\000\010\014\051\044\050\046\047\001" +
    "\002\000\006\016\054\027\223\001\002\000\006\002\uffeb" +
    "\016\uffeb\001\002\000\004\044\225\001\002\000\010\002" +
    "\ufff6\016\ufff6\024\ufff6\001\002\000\006\014\045\044\044" +
    "\001\002\000\004\014\230\001\002\000\004\027\231\001" +
    "\002\000\010\014\uffdd\016\035\044\uffdd\001\002\000\006" +
    "\014\045\044\044\001\002\000\006\002\ufff4\016\ufff4\001" +
    "\002\000\006\002\ufff0\016\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\024\002\017\003\020\004\007\010\006\014" +
    "\012\016\027\017\025\020\024\026\021\001\001\000\004" +
    "\024\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\205\020\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\041\001\001" +
    "\000\004\011\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\052\025\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\057\025" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\070\022\064\001\001\000\006\021" +
    "\131\022\064\001\001\000\002\001\001\000\004\027\127" +
    "\001\001\000\004\027\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\106\022\064\001\001\000\004" +
    "\027\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\113\022\064\001" +
    "\001\000\006\021\112\022\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\123\001\001\000\004\027" +
    "\121\001\001\000\004\027\117\001\001\000\004\023\120" +
    "\001\001\000\002\001\001\000\004\023\122\001\001\000" +
    "\002\001\001\000\004\023\124\001\001\000\002\001\001" +
    "\000\004\023\126\001\001\000\002\001\001\000\004\023" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\136\022\064\001\001\000\002\001\001\000\012\005\145" +
    "\006\143\011\141\013\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\147\025\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\152" +
    "\011\141\013\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\160\025\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\166\025\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\177\001\001\000\004" +
    "\011\200\001\001\000\002\001\001\000\004\024\202\001" +
    "\001\000\004\011\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\210\001\001\000\002\001\001\000\006\021\212\022\064" +
    "\001\001\000\002\001\001\000\010\016\214\017\025\020" +
    "\024\001\001\000\002\001\001\000\006\012\216\025\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\221\025\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\231" +
    "\001\001\000\004\011\232\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FullConditionalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FullConditionalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FullConditionalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private final static Logger logger = LogManager.getLogger(FullConditionalParser.class);

    static FullConditionalScanner scanner;
    static boolean parser_debug;
    static List<IndexerSpecException> parser_errors = null;
    static FullRecordValueExtractorFactory fullFactory = new FullRecordValueExtractorFactory();
    static DateValueExtractorFactory dateFactory = new DateValueExtractorFactory();
    static String cacheOfStrToParse;
    static String cacheOfSolrField;
    private ValueIndexerFactory valueIndexerFactory = null;

    public static void setParserDebug(boolean b) { parser_debug = b; }
    public static boolean shouldParserDebug()    { return(parser_debug); }
    public FullConditionalParser(boolean debug) throws IllegalAccessException, InstantiationException
    {
        super(debug ? new VerboseSymbolFactory() : new ComplexSymbolFactory());
        parser_debug = debug;
        scanner = new FullConditionalScanner((ComplexSymbolFactory)getSymbolFactory());
        this.setScanner(scanner);
    }

    public void setFactories(ValueIndexerFactory vif)
    {
        this.valueIndexerFactory = vif;
    }

    public MultiValueIndexer parse(String solrFields, String strToParse, boolean debug)
    {
        cacheOfSolrField = solrFields;
        cacheOfStrToParse = strToParse;
        Symbol parse_tree = null;
        MultiValueIndexer result = null;
        parser_errors = new ArrayList<IndexerSpecException>();
        scanner.startParse(strToParse);
        try{
            if (debug)
                parse_tree = this.debug_parse();
            else
                parse_tree = this.parse();
        }
        catch (IndexerSpecException ise) {
            parser_errors.add(ise);
        }
        catch (Exception e) {
            parser_errors.add(new IndexerSpecException(e, " "));
            //parser_errors.add(" Input Specification "+strToParse);
        }
        finally {
        }
        if (parse_tree != null)
        {
            result = (MultiValueIndexer) parse_tree.value;
            if (result != null)
            {
                result.setSolrFieldNamesStr(solrFields);
                result.setSpecLabel(strToParse);
             //   result.setParseErrors(parser_errors);
            }
        }
        return(result);
    }

    public MultiValueIndexer parse(String solrFields, String strToParse)
    {
        return(parse(solrFields, strToParse, parser_debug));
    }

    private AbstractValueExtractor<?> createCustomExtractor(String type, String classOrScriptName, List<String> methodPlusParams)
    {
        String[] specParts = new String[methodPlusParams.size()+2];
        specParts[0] = type;
        specParts[1] = classOrScriptName;
        System.arraycopy(methodPlusParams.toArray(new String[0]), 0, specParts, 2, methodPlusParams.size());
        for (final AbstractValueExtractorFactory factory : ValueIndexerFactory.instance().getExtractorFactories())
        {
            if (factory.canHandle("CUP Parser", specParts[0]))
            {
                return factory.createExtractor("CUP Parser", specParts);
            }
        }
        throw new IndexerSpecException("No indexer factory found for: " + Utils.join(specParts, " "));
    }

    private AbstractValueExtractor<?> createCustomExtractorShortcut(String type, String classNameDotMethodName, List<String> methodParams)
    {
        final Pattern mapShortcut = Pattern.compile("(([a-z]+[.])*[A-Z][A-Za-z0-9_]*)::((get|extract)[A-Za-z0-9]+)");
        Matcher classAndMethodMatcher = mapShortcut.matcher(classNameDotMethodName);
        if (classAndMethodMatcher.matches())
        {
            String[] specParts = new String[methodParams.size()+3];
            specParts[0] = type;
            specParts[1] = classAndMethodMatcher.group(1);
            specParts[2] = classAndMethodMatcher.group(3);
            System.arraycopy(methodParams.toArray(new String[0]), 0, specParts, 3, methodParams.size());
            for (final AbstractValueExtractorFactory factory : ValueIndexerFactory.instance().getExtractorFactories())
            {
                if (factory.canHandle("CUP Parser", specParts[0]))
                {
                    return factory.createExtractor("CUP Parser", specParts);
                }
            }
            throw new IndexerSpecException("No indexer factory found for: " + Utils.join(specParts, " "));
        }
        throw new IndexerSpecException("Shortcut form of classname.methodName doesn't match regex: " + classNameDotMethodName);
    }

    private AbstractMultiValueExtractor makeMultiValueExtractor(Object extractor)
    {
        if (AbstractMultiValueExtractor.class.isAssignableFrom(extractor.getClass()))
        {
            return((AbstractMultiValueExtractor)extractor);
        }
        else if (AbstractSingleValueExtractor.class.isAssignableFrom(extractor.getClass()))
        {
            return(new MultiValueWrapperSingleValueExtractor((AbstractSingleValueExtractor)extractor));
        }
        return(null);
    }

    public static final List<IndexerSpecException> getErrors()
    {
        if (scanner.getScannerErrors().size() == 0)
            return(parser_errors);
        List<IndexerSpecException> allErrors = new ArrayList<IndexerSpecException>();
        allErrors.addAll(parser_errors);
        for (String errMsg : scanner.getScannerErrors())
        {
            allErrors.add(new IndexerSpecException(errMsg));
        }
        return(allErrors);
    }

    public static final void addError(String errorMsg)
    {
        parser_errors.add(new IndexerSpecException(errorMsg));
    }

    public static final void addError(IndexerSpecException exception)
    {
        parser_errors.add(exception);
    }

    @Override
    public void report_error(String message, Object info)
    {
        ComplexSymbol top = (ComplexSymbol)stack.peek();
        if (info instanceof ComplexSymbol)
        {
            ComplexSymbol cs = (ComplexSymbol)info;
            addError(message+" at input symbol \""+cs.getName()+"\" following symbol "+ top.getName() +
                    " (with value of : "+ cacheOfStrToParse.substring(top.left, top.right) +" )");
            return;
        }
    }

    protected void my_report_expected_token_ids()
    {
        List<Integer> ids = expected_token_ids();
        ArrayList<String> list = new ArrayList<String>();
        for (Integer expected : ids)
        {
            list.add(symbl_name_from_id(expected));
        }
        addError("instead expected token classes are "+list.toString());
    }

    public void syntax_error(Symbol cur_token)
    {
        report_error("Syntax error", cur_token);
        my_report_expected_token_ids();
    }

    public void  debug_message(java.lang.String mess)
    {
        logger.debug(mess);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({})
class CUP$FullConditionalParser$actions {
  private final FullConditionalParser parser;

  /** Constructor */
  CUP$FullConditionalParser$actions(FullConditionalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action_part00000000(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FullConditionalParser$result;

      /* select the action based on the action number */
      switch (CUP$FullConditionalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= index_spec EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		AbstractValueIndexer< ? > start_val = (AbstractValueIndexer< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		RESULT = start_val;
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FullConditionalParser$parser.done_parsing();
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // index_spec ::= extractor COMMA mapping_specs 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<List<String>> m = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = valueIndexerFactory.makeMultiValueIndexer(cacheOfStrToParse, cacheOfSolrField, e, m, parser_errors); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // index_spec ::= extractor 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = valueIndexerFactory.makeMultiValueIndexer(cacheOfStrToParse, cacheOfSolrField, e, null, parser_errors); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extractor ::= strings 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConstantMultiValueExtractor(l);
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // extractor ::= field_spec 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification fs = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new DirectMultiValueExtractor(fs);
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extractor ::= FULLRECORD 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = makeMultiValueExtractor(fullFactory.createExtractor("CUP Parser", s)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extractor ::= regex_fields 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new RegexMultiValueExtractor(s);
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extractor ::= regex_fields QUESTION expr 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new RegexMultiValueExtractor(s, e); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extractor ::= DATE 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = dateFactory.createExtractor("CUP Parser", s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extractor ::= custom_extractor 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extractor ::= error 
            {
              AbstractValueExtractor< ? > RESULT =null;
		 RESULT = null; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // strings ::= strings OR QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // strings ::= QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // custom_extractor ::= CUSTOM LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // custom_extractor ::= JAVA LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // custom_extractor ::= SCRIPT LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // custom_extractor ::= SCRIPT LPAREN QUOTEDSTR RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, s, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // custom_extractor ::= CUSTOM opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // custom_extractor ::= JAVA opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // custom_extractor ::= CUSTOMIDENTIFIER 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor("custom", null, Collections.singletonList(s)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // custom_extractor ::= CUSTOMIDENTIFIER LPAREN params RPAREN 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 l.add(0, s); RESULT = createCustomExtractor("custom", null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // custom_extractor ::= EXTCUSTOMIDENTIFIER 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractorShortcut("custom", s,  Collections.EMPTY_LIST); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // custom_extractor ::= EXTCUSTOMIDENTIFIER LPAREN params RPAREN 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = createCustomExtractorShortcut("custom", s, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mapping_specs ::= mapping_specs COMMA mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<List<String>> l = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; if (m != null) { l.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mapping_specs ::= mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<List<String>>(); if (m != null) { RESULT.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mapping_spec ::= method_plus_params 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mapping_spec ::= custom_map_spec 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mapping_spec ::= LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, "(this).properties"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); RESULT.add(s1); RESULT.add(s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER LPAREN params RPAREN RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		 RESULT = l; RESULT.add(0, s); RESULT.add(1, s1); RESULT.add(2, s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); RESULT.add(null); RESULT.add(s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER LPAREN params RPAREN RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		 RESULT = l; RESULT.add(0, s); RESULT.add(1, null); RESULT.add(2, s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // custom_map_spec ::= error 
            {
              List<String> RESULT =null;
		 FullConditionalParser.addError("Malformed custom_map reference : Should be \ncustom_map(fully.qualified.class.Name method)\n or  custom_map(fully.qualified.class.Name method(parm1, parm2))"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regex_fields ::= FIELDS 
            {
              String RESULT =null;
		 RESULT = "..."; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("regex_fields",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // regex_fields ::= FIELDS LPAREN QUOTEDSTR RPAREN 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT =  s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("regex_fields",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opt_comma ::= COMMA 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt_comma ::= 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_plus_params ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = Collections.singletonList(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_plus_params ::= IDENTIFIER LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_plus_params ::= QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = Collections.singletonList(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_plus_params ::= QUOTEDSTR LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // params ::= params COMMA param 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // params ::= param 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param ::= IDENTIFIER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_spec ::= field_spec COLON field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s1 = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field_spec ::= field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field_spec_simple ::= field_spec_simple COLON field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s1 = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_spec_simple ::= field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field_spec_part ::= LBRACE field_spec_simple RBRACE QUESTION expr 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addConditional(e); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field_spec_part ::= field_spec_part_complex 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // field_spec_part_complex ::= field_spec_part_simple QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; s.addConditional(e); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // field_spec_part_complex ::= field_spec_part_simple 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf);
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field_spec_part_simple ::= FIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field_spec_part_simple ::= CTRLFIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // field_spec_part_simple ::= CTRLFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // field_spec_part_simple ::= FIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr AND expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.AND);
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OR expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.OR);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= NOT expr 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e, null, FullSym.NOT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LPAREN expr RPAREN 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr_part 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_part ::= SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, ((int)i));
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_part ::= IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, ((int)i));
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_part ::= POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, ((int)i));
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_part ::= FIELDSPEC SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_part ::= FIELDSPEC IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_part ::= FIELDSPEC POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.EQU); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.NEQ); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op ::= MATCH 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.MATCH); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op ::= CONTAINS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.CONTAINS); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.LT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.GT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",21, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // value ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // value ::= CHAR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // value ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FullConditionalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
              return CUP$FullConditionalParser$do_action_part00000000(
                               CUP$FullConditionalParser$act_num,
                               CUP$FullConditionalParser$parser,
                               CUP$FullConditionalParser$stack,
                               CUP$FullConditionalParser$top);
    }
}

}
