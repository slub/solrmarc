import org.marc4j.marc.Record;
import org.solrmarc.tools.Utils;

org.solrmarc.index.SolrIndexer indexer = null;
String publicationDate = null;

public String getPublicationDate(Record record)
{
    if (publicationDate != null) return(publicationDate);
        
    String field008 = indexer.getFirstFieldVal(record, "008");
    String pubDateFull = indexer.getFieldVals(record, "260c", ", ");
    String pubDateJustDigits = pubDateFull.replaceAll("[^0-9]", "");       
    String pubDate260c = indexer.getDate(record);
    // Handle missing or too-short 008 field by returning the value from 260c field
    if (field008 == null || field008.length() < 16) 
    {
        return(pubDate260c);
    }
    String field008_d1 = field008.substring(7, 11);
    String field008_d2 = field008.substring(11, 15);
    String retVal = null;
    char dateType = field008.charAt(6);
    if (dateType == 'r' && field008_d2.equals(pubDate260c)) retVal = field008_d2;
    else if (field008_d1.equals(pubDate260c))               retVal = field008_d1;
    else if (field008_d2.equals(pubDate260c))               retVal = field008_d2;
    else if (pubDateJustDigits.length() == 4 && pubDate260c != null &&
             pubDate260c.matches("(20|19|18|17|16|15)[0-9][0-9]"))
                                                            retVal = pubDate260c;
    else if (field008_d1.matches("(20|1[98765432])[0-9][0-9]"))        
                                                            retVal = field008_d1;
    else if (field008_d2.matches("(20|1[98765432])[0-9][0-9]"))        
                                                            retVal = field008_d2;
    else                                                    retVal = pubDate260c;
	publicationDate = retVal;
    return(retVal);
}
    

/**
 * returns the publication date groupings from a record, if it is present
 * @param record
 * @return Set of Strings containing the publication date groupings associated
 *   with the publish date
 */
Set getPubDateGroups(Record record)
{
    LinkedHashSet resultSet = new LinkedHashSet();
    int cYearInt = Calendar.getInstance().get(Calendar.YEAR); 
    
    // get the pub date, with decimals assigned for inclusion in ranges
    String publicationDate =  indexer.getPublicationDate(record);
    if (publicationDate != null)
    {
        int year = Integer.parseInt(publicationDate);
        // "this year" and "last three years" are for 4 digits only
        if ( year >= (cYearInt - 1))   resultSet.add("This year");
        if ( year >= (cYearInt - 3))   resultSet.add("Last 3 years");
        if ( year >= (cYearInt - 10))  resultSet.add("Last 10 years");
        if ( year >= (cYearInt - 50))  resultSet.add("Last 50 years");
        if ( year < (cYearInt - 50) && (year > -1.0))
            resultSet.add("More than 50 years ago");
    }
    return resultSet;   
}

Set initGeographic()
{
    LinkedHashSet result = new LinkedHashSet();
    result.add("China");
    result.add("Great Britain");
    result.add("Developing countries");
    result.add("France");
    result.add("Spain");
    result.add("United States");
    result.add("California");
    result.add("Los Angeles");
    result.add("Hollywood");
    result.add("Spain");
    result.add("United States");
    result.add("California");
    result.add("Los Angeles");
    result.add("Soviet Union");
    result.add("Africa south of the Sahara");
    result.add("Scotland");
    result.add("Poland");
    result.add("Greece");
    result.add("East Germany");
    result.add("Leicestershire");
    result.add("Kenya");
    result.add("Italy");
    result.add("Ireland (Republic)");
    result.add("South Wales");
    result.add("Uganda");
    result.add("Sudan");
    result.add("Bahrain");
    result.add("South-east Asia");
    result.add("Tibet");
    result.add("Malaysia");
    result.add("Thailand");
    result.add("Nigeria");
    result.add("West Germany");
    result.add("Egypt");
    return(result);
}

Set initGenre()
{
    LinkedHashSet result = new LinkedHashSet();
    result.add("Monograph");
    return(result);
}

LinkedHashSet isGeographic = null;
LinkedHashSet isGenre = null;

Map getTopicFacets(Record record)
{
    LinkedHashMap resultMap = new LinkedHashMap();
    LinkedHashSet resultGeographic = new LinkedHashSet();
    LinkedHashSet resultGenre = new LinkedHashSet();
    LinkedHashSet resultTopic = new LinkedHashSet();
    if (isGeographic == null) isGeographic = initGeographic();
    if (isGenre == null) isGenre = initGenre();

    Set values = indexer.getFieldList(record, "653a");
    for (String value : values)
    {
        if (isGeographic.contains(value))  resultGeographic.add(value);
        else if (isGenre.contains(value))  resultGenre.add(value);
        else                               resultTopic.add(value);
    }
    if (resultGeographic.size() > 0)  resultMap.put("geographic_facet", resultGeographic);
    if (resultGenre.size() > 0)  resultMap.put("genre_facet", resultGenre);
    if (resultTopic.size() > 0)  resultMap.put("topic_facet", resultTopic);
    return(resultMap);
}